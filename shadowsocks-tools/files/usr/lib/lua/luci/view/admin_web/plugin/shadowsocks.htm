<%

--[[
shadowsocks.htm - Shadowsocks configuration page
Author: Justin <rssnsj@gmail.com>
Copyright: 2015
]]--

local ver = require "luci.version"
local adv_menu = luci.util.get_adv_menu()
local request_uri = luci.http.getenv("REQUEST_URI")
local uci = require "luci.model.uci"
local os, io, print, tostring, tonumber, string = os, io, print, tostring, tonumber, string
local luci = require "luci"

-- -------------------------------------------------
function is_shadowsocks_on()
	local rc = os.execute([[
iptables-save | grep 'shadowsocks_pre.*REDIRECT' >/dev/null || exit 1
pidof ss-redir >/dev/null || pidof ssh >/dev/null
]])
	if rc == 0 then
		return true
	else
		return false
	end
end

function is_shadowsocks_en()
	if os.execute("/etc/init.d/ss-ssh.sh enabled || /etc/init.d/ss-ssh.sh enabled") == 0 then
		return true
	else
		return false
	end
end

-- -------------------------------------------------

function do_ss_save_params()
	local ss_server = tostring(luci.http.formvalue("server"))
	local ss_server_port = tonumber(luci.http.formvalue("server_port"))
	local ss_password = tostring(luci.http.formvalue("password"))
	local ss_method = tostring(luci.http.formvalue("method"))
	local ss_username = tostring(luci.http.formvalue("username"))
	local ss_proxy_mode = tostring(luci.http.formvalue("proxy_mode"))
	local ss_safe_dns = tostring(luci.http.formvalue("safe_dns"))
	local ss_safe_dns_port = tonumber(luci.http.formvalue("safe_dns_port"))
	local ss_safe_dns_tcp = tonumber(luci.http.formvalue("safe_dns_tcp"))

	local failure_msg = nil

	-- Check hostanme
	if not string.match(ss_server, '^[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+$') and
		not string.match(ss_server, '^[A-Za-z0-9_:\.-]\+$') then
		failure_msg = "配置错误：无效的服务器IP地址或域名"
	end

	-- Check encryption method and method-specific parameters
	if ss_method == "ssh" then
		if ss_server_port == nil then
			ss_server_port = 22
		end
		if ss_username == nil or ss_username == "" then
			failure_msg = "配置错误：没有指定SSH用户名"
		end
	else
		if ss_server_port == nil then
			failure_msg = "配置错误：无效的服务器端口号"
		end
	end

	-- Check safe DNS server address and port if user specifies
	if ss_safe_dns and ss_safe_dns ~= "" then
		if not string.match(ss_safe_dns, '^[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+$') and
		   not string.match(ss_safe_dns, '^[0-9a-f:\.]\+$') then
			failure_msg = "配置错误：无效的DNS服务器IP"
		end
		if ss_safe_dns_port == nil or ss_safe_dns_port <= 0 or ss_safe_dns_port > 65535 then
			ss_safe_dns_port = 53
		end
	end
	if ss_safe_dns_port == nil then
		ss_safe_dns_port = ""
	end
	if ss_safe_dns_tcp == nil then
		ss_safe_dns_tcp = 0
	end

	local code, msg, status = 0, "", ""
	if failure_msg then
		code = -1
		msg = failure_msg
		status = "stopped"
	else
		-- Write parameters to UCI configuration
		os.execute("touch /etc/config/shadowsocks")
		local _uci_real = uci.cursor()
		_uci_real:set("shadowsocks", "default", "shadowsocks")
		_uci_real:set("shadowsocks", "default", "enabled", 1)
		_uci_real:set("shadowsocks", "default", "server", ss_server)
		_uci_real:set("shadowsocks", "default", "server_port", ss_server_port)
		_uci_real:set("shadowsocks", "default", "password", ss_password)
		_uci_real:set("shadowsocks", "default", "method", ss_method)
		_uci_real:set("shadowsocks", "default", "username", ss_username)
		_uci_real:set("shadowsocks", "default", "proxy_mode", ss_proxy_mode)
		_uci_real:set("shadowsocks", "default", "safe_dns", ss_safe_dns)
		_uci_real:set("shadowsocks", "default", "safe_dns_port", ss_safe_dns_port)
		_uci_real:set("shadowsocks", "default", "safe_dns_tcp", ss_safe_dns_tcp)
		_uci_real:save("shadowsocks")
		_uci_real:commit("shadowsocks")

		if is_shadowsocks_en() or is_shadowsocks_on() then
			if os.execute("/etc/init.d/ss-ssh.sh restart") == 0 then
				code = 0
				msg = "OK"
			else
				code = -1
				msg = "配置成功，但启动失败"
			end
		else
			code = 0
			msg = "OK"
		end
	end

	if is_shadowsocks_on() then
		status = "running"
	else
		status = "stopped"
	end

	print("{\"code\":\"" .. code .. "\", \"msg\":\"" .. msg .. "\", \"status\":\"" .. status .. "\"}")
end

function do_ss_get_status()
	if is_shadowsocks_on() then
		print("{\"status\":\"running\"}")
	else
		print("{\"status\":\"stopped\"}")
	end
end

function do_ss_start()
	os.execute("/etc/init.d/ss-ssh.sh restart || exit 1; /etc/init.d/ss-ssh.sh enable || :")
	if is_shadowsocks_on() then
		print("{\"status\":\"running\"}")
	else
		print("{\"status\":\"stopped\"}")
	end
end

function do_ss_stop()
	os.execute("/etc/init.d/ss-ssh.sh stop; /etc/init.d/ss-ssh.sh disable")
	if is_shadowsocks_on() then
		print("{\"status\":\"running\"}")
	else
		print("{\"status\":\"stopped\"}")
	end
end

-- -------------------------------------------------

%>
<%

local page_action = tostring(luci.http.formvalue("PAGE_ACTION"))

if page_action == "save_params" then
	do_ss_save_params()
	os.exit(0)
elseif page_action == "get_status" then
	do_ss_get_status()
	os.exit(0)
elseif page_action == "start_ss" then
	do_ss_start()
	os.exit(0)
elseif page_action == "stop_ss" then
	do_ss_stop()
	os.exit(0)
else
	local _uci_real = uci.cursor(nil, "/etc/config")
	local ss_server = _uci_real:get("shadowsocks", "default", "server")
	local ss_server_port = _uci_real:get("shadowsocks", "default", "server_port")
	local ss_password = _uci_real:get("shadowsocks", "default", "password")
	local ss_method = _uci_real:get("shadowsocks", "default", "method")
	local ss_username = _uci_real:get("shadowsocks", "default", "username")
	local ss_proxy_mode = _uci_real:get("shadowsocks", "default", "proxy_mode")
	local ss_safe_dns = _uci_real:get("shadowsocks", "default", "safe_dns")
	local ss_safe_dns_port = _uci_real:get("shadowsocks", "default", "safe_dns_port")
	local ss_safe_dns_tcp = tonumber(_uci_real:get("shadowsocks", "default", "safe_dns_tcp"))

%>
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<meta name="format-detection" content="telephone=no" />
<title>HiWiFi 路由器</title>
<link rel="stylesheet" href="<%=resource%>/web/css/style.css?v=<%=ver.svnRevNum%>" type="text/css"/>
<script type="text/javascript" src="<%=resource%>/web/js/jquery-1.8.1.min.js?v=<%=ver.svnRevNum%>"></script>
<script type="text/javascript" src="<%=resource%>/web/js/artDialog/jquery.artDialog.js?skin=blueskin"></script>
<script src="<%=resource%>/web/js/artDialog/plugins/iframeTools.source.js?v=<%=ver.svnRevNum%>"></script>
<style type="text/css">
table.zone td.tor { text-align:right;width:120px;line-height:14px; }
#con_stauts { width:300px; }
</style>
<script type="text/javascript">
$(document).ready(function () {

	function set_status_text(status, msg) {
		var text = "未知", color = "grey";
		switch (status) {
		case "starting":
			text = "正在启动..."; color = "#555555";
			break;
		case "stopping":
			text = "正在停止..."; color = "#555555";
			break;
		case "configuring":
			text = "配置中..."; color = "#555555";
			break;
		case "flushing":
			text = "刷新中..."; color = "#555555";
			break;
		case "running":
			text = "运行中"; color = "green";
			break;
		case "stopped":
			text = "未启动"; color = "red";
			break;
		}
		document.getElementById("status_text").innerHTML = "<font color='" + color + "'>" + text + "</font>";
		if (msg) {
			document.getElementById("failure_msg").innerHTML = msg;
		} else {
			document.getElementById("failure_msg").innerHTML = "";
		}
	}
	function __get_ss_status() {
		set_status_text("flushing");
		var req_data = [ { name:"PAGE_ACTION", value:"get_status" } ];
		$.getJSON("<%=luci.dispatcher.build_url("admin_web", "plugin", "shadowsocks")%>", req_data, function (rsp_data) {
			set_status_text(rsp_data.status);
		});
	}

	__get_ss_status();
	$("#flush_button").on("click", __get_ss_status);
	$("#start_button").on("click", function () {
		set_status_text("starting");
		var req_data = [ { name:"PAGE_ACTION", value:"start_ss" } ];
		$.getJSON("<%=luci.dispatcher.build_url("admin_web", "plugin", "shadowsocks")%>", req_data, function (rsp_data) {
			set_status_text(rsp_data.status);
		});
	});
	$("#stop_button").on("click", function () {
		set_status_text("stopping");
		var req_data = [ { name:"PAGE_ACTION", value:"stop_ss" } ];
		$.getJSON("<%=luci.dispatcher.build_url("admin_web", "plugin", "shadowsocks")%>", req_data, function (rsp_data) {
			set_status_text(rsp_data.status);
		});
	});

	$("#save_button").on("click", function () {
		set_status_text("configuring");
		var req_data = $("#form1").serializeArray(); 
		$.post("<%=luci.dispatcher.build_url("admin_web", "plugin", "shadowsocks")%>", req_data, function (rsp_data) {
			if (rsp_data.code == "0") {
				set_status_text(rsp_data.status, "");
			} else {
				set_status_text(rsp_data.status, rsp_data.msg);
			}
		}, "json");
	});
});
</script>
</head>
<body>
<div class="title">
	<h2>高级设置<i>设置路由器安全 , 及其他高级设置</i></h2>
</div>
<div class="menu">
	<% include("admin_web/menu/adv_menu") %>
</div>
<div class="box setup_box" style="height:auto;overflow:auto;">
<form id="form1" method="POST" action="<%=luci.dispatcher.build_url("admin_web", "plugin","shadowsocks")%>">
<ul class="ullist">
	<li class="ipt_from">
		<div class="memu row">
			<input type="hidden" name="PAGE_ACTION" value="save_params" />
			<p>
				<label><font color="red">*</font> 服务器地址</label>
				<input type="text" name="server" class="txt" value="<%=ss_server%>" />
			</p>
			<p>
				<label><font color="red">*</font> 服务器端口</label>
				<input type="text" name="server_port" class="txt" value="<%=ss_server_port%>" />
			</p>
			<p>
				<label>&nbsp; SSH用户名</label>
				<input type="text" name="username" class="txt" value="<%=ss_username%>" />
				（仅对SSH模式有效）
			</p>
			<p>
				<label><font color="red">*</font> 密码</label>
				<input type="password" id="ss_key_box" name="password" class="txt" value="<%=ss_password%>" />
				<input type="checkbox" id="key_box_sw" onclick="var e = document.getElementById('ss_key_box'); e.type = this.checked ? 'text' : 'password';">&nbsp;
				<label for="key_box_sw">显示</label>
			</p>
			<p>
				<label><font color="red">*</font> 加密类型</label>
				<select name="method" class="txt"><%
					local ss_methods = { "ssh", "table", "rc4", "rc4-md5", "aes-128-cfb", "aes-192-cfb",
						"aes-256-cfb", "bf-cfb", "camellia-128-cfb", "camellia-192-cfb", "camellia-256-cfb",
						"cast5-cfb", "des-cfb", "idea-cfb", "rc2-cfb", "seed-cfb", "salsa20", "chacha20" }
					for __k, __v, __n in pairs(ss_methods) do
						if __v == "ssh" then
							__n = "SSH（SSH加速模式）"
						else
							__n = __v
						end
						if __v == ss_method then
							print("<option selected=\"selected\" value=\"" .. __v .. "\">" .. __n .. "</option>")
						else
							print("<option value=\"" .. __v .. "\">" .. __n .. "</option>")
						end
					end
				%></select>
			</p>
			<p>
				<label>&nbsp; 安全DNS</label>
				<input type="text" name="safe_dns" class="txt" style="width:130px;" value="<%=ss_safe_dns%>" />
				<label>端口</label>
				<input type="text" name="safe_dns_port" class="txt" style="margin-left:40px;width:50px;" value="<%=ss_safe_dns_port%>" />
				<input type="checkbox" name="safe_dns_tcp" style="margin-left:5px" value="1" id="sdt" <%
					if ss_safe_dns_tcp and ss_safe_dns_tcp > 0 then
						print("checked=\"checked\"")
					end
					%> />
				<label for="sdt">&nbsp;使用TCP</label>
			</p>
			<p>
				<label>&nbsp; 代理模式</label>
				<select name="proxy_mode" class="txt" style="width:230px"><%
					local ms = ss_proxy_mode == "S" and "selected=\"selected\"" or ""
					local mg = ss_proxy_mode == "G" and "selected=\"selected\"" or ""
					local mm = ss_proxy_mode == "M" and "selected=\"selected\"" or ""
				%>
					<option value="S" <%=ms%>>所有非中国的IP</option>
					<option value="G" <%=mg%>>所有公网IP</option>
					<option value="M" <%=mm%>>基于gfwlist的自动代理（需刷新DNS缓存）</option>
				</select>
			</p>

			<div class="form-row">
				<p>
					<label>&nbsp; 状态:</label>
					<span id="status_text" style="margin:0px 30px 0px 100px;">
						<% if is_shadowsocks_on() then %>
						<font color="green">运行中</font>
						<% else %>
						<font color="red">未启动</font>
						<% end %>
					</span>
					<a href="javascript:void(0);" id="start_button">启动</a> 
					<a href="javascript:void(0);" id="stop_button">停止</a>
					<a href="javascript:void(0);" id="flush_button">刷新</a>
					<span id="failure_msg" style="margin:0px 0px 0px 50px;color:#ff0000;"></span>
				</p>
			</div>
		</div>
	</li>
	<li  class="ipt_from"><div class="btnbox"><input id="save_button" type="button" value="保存" class="btn" /></div></li>
</ul></form>
</div>
</body>
</html>
<%
end
%>
